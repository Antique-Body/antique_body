// This is your Prisma schema file
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  trainer
  client
  user
  admin
}

enum TrainingEnvironment {
  gym
  outside
}

enum EquipmentType {
  with_equipment
  no_equipment
}

enum ExperienceLevel {
  beginner
  intermediate
  advanced
  expert
}

enum TrainingGoal {
  strength
  muscle
  lose_weight
  endurance
}

enum RehabilitationOption {
  yes
  no
}

enum InjuryType {
  no
  past
  current
  chronic
}

enum InjuryLocation {
  neck
  shoulder_l
  shoulder_r
  back_upper
  back_lower
  elbow_l
  elbow_r
  wrist_l
  wrist_r
  hip_l
  hip_r
  knee_l
  knee_r
  ankle_l
  ankle_r
}

// Simple User model for authentication
model User {
  id                String    @id @default(cuid())
  name              String
  lastName          String?
  email             String    @unique
  password          String?
  role              UserRole?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  accounts          Account[]
  sessions          Session[]
  preferences       UserPreferences?

  @@index([email])
  @@index([role])
}

// NextAuth models
model Account {
  id                 String    @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id            String    @id @default(cuid())
  sessionToken  String    @unique
  userId        String
  expires       DateTime
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier    String
  token         String    @unique
  expires       DateTime

  @@unique([identifier, token])
}

model UserPreferences {
  id                  String              @id @default(cuid())
  userId              String              @unique
  hasInjury           Boolean             @default(false)
  injuryType          InjuryType?
  wantsRehabilitation RehabilitationOption? 
  environment         TrainingEnvironment
  equipment           EquipmentType
  experience          ExperienceLevel
  goal                TrainingGoal
  frequency           Int                 @db.Int
  weight              Float               // Weight in kg
  height              Float               // Height in cm
  bmi                 Float               // BMI value
  bmiCategory         String              // For quick category filtering
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  injuries            UserInjuryLocation[]

  // Indexes for all filterable fields
  @@index([environment])
  @@index([equipment])
  @@index([experience])
  @@index([goal])
  @@index([frequency])
  @@index([hasInjury])
  @@index([injuryType])
  @@index([bmi])
  @@index([bmiCategory])
  @@index([wantsRehabilitation])
  @@index([weight])
  @@index([height])
  @@index([createdAt])
  @@index([hasInjury, injuryType]) // Composite index for injury filtering
}

// Junction table for user preferences and injury locations
model UserInjuryLocation {
  id                String          @id @default(cuid())
  userPreferences   UserPreferences @relation(fields: [userPreferencesId], references: [id], onDelete: Cascade)
  userPreferencesId String
  location          InjuryLocation
  createdAt         DateTime        @default(now())

  @@unique([userPreferencesId, location])
  @@index([location])
  @@index([userPreferencesId])
  @@index([location, userPreferencesId]) // Composite index for faster filtering
} 