generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
}

model User {
  id                 String              @id @default(cuid())
  email              String?             @unique
  phone              String?             @unique
  password           String?
  role               UserRole?
  language           String              @default("en")
  emailVerified      DateTime?
  phoneVerified      DateTime?
  resetToken         String?
  resetTokenExpiry   DateTime?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  accounts           Account[]
  clientInfo         ClientInfo?
  emailVerifications EmailVerification[]
  phoneVerifications PhoneVerification[]
  trainerInfo        TrainerInfo?

  @@index([email])
  @@index([phone])
  @@index([role])
  @@index([resetToken])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model EmailVerification {
  id        String   @id @default(cuid())
  email     String
  code      String
  used      Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([code])
  @@index([userId])
}

model PhoneVerification {
  id        String   @id @default(cuid())
  phone     String
  code      String
  used      Boolean  @default(false)
  expires   DateTime
  createdAt DateTime @default(now())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([phone])
  @@index([code])
  @@index([userId])
}

model Location {
  id              String           @id @default(cuid())
  city            String
  state           String?
  country         String
  lat             Float?
  lon             Float?
  clientProfiles  ClientProfile[]
  gyms            Gym[]
  trainerProfiles TrainerProfile[]

  @@index([city])
  @@index([country])
}

model Gym {
  id         String       @id @default(cuid())
  name       String
  address    String?
  lat        Float
  lon        Float
  placeId    String?      @unique
  locationId String?
  location   Location?    @relation(fields: [locationId], references: [id])
  trainers   TrainerGym[]
}

model TrainerInfo {
  id                       String                    @id @default(cuid())
  userId                   String                    @unique
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  assignedTrainingPlans    AssignedTrainingPlan[]
  coachingRequests         CoachingRequest[]
  coachingRequestCooldowns CoachingRequestCooldown[]
  exercises                Exercise[]
  meals                    Meal[]
  nutritionPlans           NutritionPlan[]
  user                     User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  trainerProfile           TrainerProfile?
  trainerSettings          TrainerSettings?
  trainingPlans            TrainingPlan[]
  assignedDietPlans        DietPlanAssignment[]
}

model TrainerProfile {
  id                  String                @id @default(cuid())
  trainerInfoId       String                @unique
  firstName           String
  lastName            String?
  dateOfBirth         DateTime?
  gender              String?
  trainerSince        Int?
  profileImage        String?
  description         String?
  paidAds             DateTime?
  trainingEnvironment String?
  locationId          String?
  contactEmail        String?
  contactPhone        String?
  sessionDuration     Int?
  cancellationPolicy  Int?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  certifications      Certification[]
  availabilities      TrainerAvailability[]
  galleryImages       TrainerGalleryImage[]
  trainerGyms         TrainerGym[]
  languages           TrainerLanguage[]
  location            Location?             @relation(fields: [locationId], references: [id])
  trainerInfo         TrainerInfo           @relation(fields: [trainerInfoId], references: [id], onDelete: Cascade)
  specialties         TrainerSpecialty[]
  trainingTypes       TrainerType[]

  @@index([trainingEnvironment])
}

model TrainerSettings {
  id                 String      @id @default(cuid())
  trainerInfoId      String      @unique
  notifications      Boolean     @default(true)
  emailNotifications Boolean     @default(true)
  smsNotifications   Boolean     @default(false)
  autoAcceptBookings Boolean     @default(false)
  requireDeposit     Boolean     @default(false)
  depositAmount      Int?
  timezone           String      @default("UTC")
  workingHours       Json?
  blackoutDates      Json?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  trainerInfo        TrainerInfo @relation(fields: [trainerInfoId], references: [id], onDelete: Cascade)
}

model TrainerSpecialty {
  id               String         @id @default(cuid())
  trainerProfileId String
  name             String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  trainerProfile   TrainerProfile @relation(fields: [trainerProfileId], references: [id], onDelete: Cascade)
}

model TrainerLanguage {
  id               String         @id @default(cuid())
  trainerProfileId String
  name             String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  trainerProfile   TrainerProfile @relation(fields: [trainerProfileId], references: [id], onDelete: Cascade)
}

model TrainerType {
  id               String         @id @default(cuid())
  trainerProfileId String
  name             String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  trainerProfile   TrainerProfile @relation(fields: [trainerProfileId], references: [id], onDelete: Cascade)
}

model Certification {
  id               String                  @id @default(cuid())
  trainerProfileId String
  name             String
  issuer           String?
  expiryDate       DateTime?
  status           CertificationStatus     @default(pending)
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  hidden           Boolean                 @default(false)
  trainerProfile   TrainerProfile          @relation(fields: [trainerProfileId], references: [id], onDelete: Cascade)
  documents        CertificationDocument[]
}

model CertificationDocument {
  id              String        @id @default(cuid())
  certificationId String
  url             String
  originalName    String?
  mimetype        String?
  createdAt       DateTime      @default(now())
  certification   Certification @relation(fields: [certificationId], references: [id], onDelete: Cascade)
}

model ClientInfo {
  id                       String                    @id @default(cuid())
  userId                   String                    @unique
  totalSessions            Int                       @default(0)
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  assignedTrainingPlans    AssignedTrainingPlan[]
  user                     User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  clientProfile            ClientProfile?
  clientSettings           ClientSettings?
  coachingRequests         CoachingRequest[]
  coachingRequestCooldowns CoachingRequestCooldown[]
  dietPlanAssignments      DietPlanAssignment[]
  customMeals              CustomMeal[]
}

model ClientProfile {
  id                  String           @id @default(cuid())
  clientInfoId        String           @unique
  firstName           String
  lastName            String
  dateOfBirth         DateTime
  gender              String
  height              Int?
  weight              Int?
  experienceLevel     String
  previousActivities  String?
  primaryGoal         String?
  secondaryGoal       String?
  goalDescription     String?
  contactEmail        String?
  contactPhone        String?
  locationId          String?
  profileImage        String?
  description         String?
  medicalConditions   String?
  allergies           String?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  preferredActivities ClientActivity[]
  languages           ClientLanguage[]
  clientInfo          ClientInfo       @relation(fields: [clientInfoId], references: [id], onDelete: Cascade)
  location            Location?        @relation(fields: [locationId], references: [id])
}

model ClientSettings {
  id                 String     @id @default(cuid())
  clientInfoId       String     @unique
  notifications      Boolean    @default(true)
  emailNotifications Boolean    @default(true)
  smsNotifications   Boolean    @default(false)
  reminderTime       Int        @default(24)
  privacyLevel       String     @default("public")
  shareProgress      Boolean    @default(true)
  timezone           String     @default("UTC")
  preferredLanguage  String     @default("en")
  measurementUnit    String     @default("metric")
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  clientInfo         ClientInfo @relation(fields: [clientInfoId], references: [id], onDelete: Cascade)
}

model ClientLanguage {
  id              String        @id @default(cuid())
  clientProfileId String
  name            String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  clientProfile   ClientProfile @relation(fields: [clientProfileId], references: [id], onDelete: Cascade)
}

model ClientActivity {
  id              String        @id @default(cuid())
  clientProfileId String
  name            String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  clientProfile   ClientProfile @relation(fields: [clientProfileId], references: [id], onDelete: Cascade)
}

model TrainerGym {
  id        String         @id @default(cuid())
  trainerId String
  gymId     String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now())
  gym       Gym            @relation(fields: [gymId], references: [id], onDelete: Cascade)
  trainer   TrainerProfile @relation(fields: [trainerId], references: [id], onDelete: Cascade)

  @@unique([trainerId, gymId])
  @@index([gymId])
}

model TrainerAvailability {
  id               String         @id @default(cuid())
  trainerProfileId String
  weekday          String
  timeSlot         String
  trainerProfile   TrainerProfile @relation(fields: [trainerProfileId], references: [id], onDelete: Cascade)

  @@index([trainerProfileId])
  @@index([weekday])
  @@index([timeSlot])
}

model Exercise {
  id            String                @id @default(cuid())
  trainerInfoId String
  name          String
  location      String
  equipment     Boolean               @default(true)
  type          String
  level         String
  description   String
  instructions  String
  videoUrl      String?
  imageUrl      String?
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  trainerInfo   TrainerInfo           @relation(fields: [trainerInfoId], references: [id], onDelete: Cascade)
  exerciseInfo  ExerciseInfo?
  muscleGroups  ExerciseMuscleGroup[]

  @@index([trainerInfoId])
  @@index([type])
  @@index([level])
  @@index([location])
  @@index([equipment])
  @@index([name])
  @@index([createdAt])
  @@index([trainerInfoId, type])
  @@index([trainerInfoId, level])
  @@index([trainerInfoId, location])
  @@index([trainerInfoId, equipment])
  @@index([trainerInfoId, createdAt])
}

model ExerciseMuscleGroup {
  id         String   @id @default(cuid())
  exerciseId String
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@index([exerciseId])
  @@index([name])
}

model ExerciseInfo {
  id            String   @id @default(cuid())
  exerciseId    String   @unique
  totalUses     Int      @default(0)
  averageRating Float?
  totalRatings  Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  exercise      Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
}

model TrainerGalleryImage {
  id               String         @id @default(cuid())
  trainerProfileId String
  url              String
  description      String?
  order            Int
  isHighlighted    Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  trainerProfile   TrainerProfile @relation(fields: [trainerProfileId], references: [id], onDelete: Cascade)

  @@index([trainerProfileId])
  @@index([trainerProfileId, order])
}

model Meal {
  id              String      @id @default(cuid())
  trainerId       String
  name            String
  mealType        String
  difficulty      String
  preparationTime Int
  calories        Float       @default(0)
  protein         Float       @default(0)
  carbs           Float       @default(0)
  fat             Float       @default(0)
  dietary         Json
  cuisine         String      @default("other")
  ingredients     String
  recipe          String
  imageUrl        String?
  videoUrl        String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  trainerInfo     TrainerInfo @relation(fields: [trainerId], references: [id], onDelete: Cascade)

  @@index([trainerId])
  @@index([mealType])
  @@index([difficulty])
  @@index([cuisine])
  @@index([name])
  @@index([createdAt])
  @@index([trainerId, mealType])
  @@index([trainerId, difficulty])
  @@index([trainerId, cuisine])
  @@index([trainerId, createdAt])
}

model TrainingPlan {
  id                    String                 @id @default(cuid())
  trainerInfoId         String
  title                 String
  description           String?
  coverImage            String?
  price                 Float?
  duration              Int?
  durationType          String?
  keyFeatures           Json?
  trainingType          String?
  timeline              Json?
  features              Json?
  sessionsPerWeek       Int?
  sessionFormat         Json?
  difficultyLevel       String?
  schedule              Json?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  deletedAt             DateTime?
  clientCount           Int?
  assignedTrainingPlans AssignedTrainingPlan[]
  trainerInfo           TrainerInfo            @relation(fields: [trainerInfoId], references: [id], onDelete: Cascade)

  @@index([trainerInfoId])
}

model NutritionPlan {
  id                        String      @id @default(cuid())
  trainerInfoId             String
  title                     String
  description               String?
  coverImage                String?
  price                     Float?
  duration                  Int?
  durationType              String?
  keyFeatures               Json?
  timeline                  Json?
  nutritionInfo             Json?
  mealTypes                 Json?
  supplementRecommendations String?
  cookingTime               String?
  targetGoal                String?
  days                      Json?
  recommendedFrequency      String?
  adaptability              String?
  createdAt                 DateTime    @default(now())
  updatedAt                 DateTime    @updatedAt
  deletedAt                 DateTime?
  clientCount               Int?
  trainerInfo               TrainerInfo @relation(fields: [trainerInfoId], references: [id], onDelete: Cascade)
  dietPlanAssignments       DietPlanAssignment[]
  
  @@index([trainerInfoId])
}

model CoachingRequest {
  id              String                @id @default(cuid())
  clientId        String
  trainerId       String
  note            String?
  status          CoachingRequestStatus @default(pending)
  rejectionReason String?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @default(now()) @updatedAt
  respondedAt     DateTime?
  client          ClientInfo            @relation(fields: [clientId], references: [id], onDelete: Cascade)
  trainer         TrainerInfo           @relation(fields: [trainerId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([trainerId])
  @@index([status])
  @@index([createdAt])
}

model CoachingRequestCooldown {
  id        String      @id @default(cuid())
  clientId  String
  trainerId String
  removedAt DateTime    @default(now())
  expiresAt DateTime
  client    ClientInfo  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  trainer   TrainerInfo @relation(fields: [trainerId], references: [id], onDelete: Cascade)

  @@unique([clientId, trainerId])
  @@index([clientId])
  @@index([trainerId])
  @@index([expiresAt])
  @@index([removedAt])
}


// Diet Tracking System
model DietPlanAssignment {
  id              String   @id @default(cuid())
  clientId        String
  nutritionPlanId String
  assignedById    String   // trainer who assigned the plan
  startDate       DateTime @default(now())
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  client          ClientInfo @relation(fields: [clientId], references: [id], onDelete: Cascade)
  nutritionPlan   NutritionPlan @relation(fields: [nutritionPlanId], references: [id], onDelete: Cascade)
  assignedBy      TrainerInfo @relation(fields: [assignedById], references: [id], onDelete: Cascade)
  dailyLogs       DailyDietLog[]
  
  @@index([clientId])
  @@index([nutritionPlanId])
  @@index([assignedById])
  @@index([isActive])
  @@index([startDate])
}

model DailyDietLog {
  id                  String   @id @default(cuid())
  dietPlanAssignmentId String
  date                DateTime @db.Date
  dayNumber           Int      // Which day of the plan (1, 2, 3, etc.)
  totalCalories       Float    @default(0)
  totalProtein        Float    @default(0)
  totalCarbs          Float    @default(0)
  totalFat            Float    @default(0)
  completedMeals      Int      @default(0)
  totalMeals          Int      @default(0)
  isCompleted         Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  dietPlanAssignment  DietPlanAssignment @relation(fields: [dietPlanAssignmentId], references: [id], onDelete: Cascade)
  mealLogs            MealLog[]
  snackLogs           SnackLog[]
  
  @@unique([dietPlanAssignmentId, date])
  @@index([dietPlanAssignmentId])
  @@index([date])
  @@index([dayNumber])
  @@index([isCompleted])
}

model MealLog {
  id              String   @id @default(cuid())
  dailyDietLogId  String
  mealName        String   // "Breakfast", "Lunch", "Dinner", "Snack"
  mealTime        String   // "08:00", "13:00", etc.
  selectedOption  Json     // The meal option that was selected
  isCompleted     Boolean  @default(false)
  completedAt     DateTime?
  calories        Float    @default(0)
  protein         Float    @default(0)
  carbs           Float    @default(0)
  fat             Float    @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  dailyDietLog    DailyDietLog @relation(fields: [dailyDietLogId], references: [id], onDelete: Cascade)
  
  @@index([dailyDietLogId])
  @@index([mealName])
  @@index([isCompleted])
  @@index([completedAt])
}

// Snack Log for extra meals/snacks outside of planned meals
model SnackLog {
  id              String   @id @default(cuid())
  dailyDietLogId  String
  name            String   // Name of the snack/food
  description     String?  // Optional description
  mealType        String   // "snack", "drink", "dessert", "supplement", "other"
  calories        Float    @default(0)
  protein         Float    @default(0)
  carbs           Float    @default(0)
  fat             Float    @default(0)
  ingredients     Json     // Array of ingredient strings
  loggedAt        DateTime @default(now())
  loggedTime      String   // Time when logged (HH:MM format)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  dailyDietLog    DailyDietLog @relation(fields: [dailyDietLogId], references: [id], onDelete: Cascade)
  
  @@index([dailyDietLogId])
  @@index([mealType])
  @@index([loggedAt])
  @@index([loggedTime])
}

// Custom Meal History System
model CustomMeal {
  id              String   @id @default(cuid())
  clientId        String
  name            String
  description     String?
  mealType        String   // "breakfast", "lunch", "dinner", "snack"
  calories        Float    @default(0)
  protein         Float    @default(0)
  carbs           Float    @default(0)
  fat             Float    @default(0)
  ingredients     Json     // Array of ingredient strings
  usageCount      Int      @default(1)
  lastUsed        DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  client          ClientInfo @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  @@index([clientId])
  @@index([mealType])
  @@index([lastUsed])
  @@index([usageCount])
  @@index([clientId, mealType])
  @@index([clientId, lastUsed])
  @@index([clientId, name, mealType, calories, protein, carbs, fat])
}


model AssignedTrainingPlan {
  id             String       @id @default(cuid())
  clientId       String
  trainerId      String
  originalPlanId String
  planData       Json
  status         String       @default("active")
  assignedAt     DateTime     @default(now())
  completedAt    DateTime?
  client         ClientInfo   @relation(fields: [clientId], references: [id])
  originalPlan   TrainingPlan @relation(fields: [originalPlanId], references: [id])
  trainer        TrainerInfo  @relation(fields: [trainerId], references: [id])

  @@index([clientId])
  @@index([trainerId])
  @@index([status])
}

enum UserRole {
  trainer
  client
  user
  admin
}

enum CertificationStatus {
  pending
  accepted
  rejected
  expired
}

enum CoachingRequestStatus {
  pending
  accepted
  rejected
  cancelled
}