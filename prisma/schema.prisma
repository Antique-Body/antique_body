// This is your Prisma schema file
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  trainer
  client
  user
  admin
}

enum TrainingEnvironment {
  gym
  outside
}

enum EquipmentType {
  with_equipment
  no_equipment
}

enum ExperienceLevel {
  beginner
  intermediate
  advanced
  expert
}

enum TrainingGoal {
  strength
  muscle
  lose_weight
  endurance
}

enum RehabilitationOption {
  yes
  no
}

enum InjuryType {
  no
  past
  current
  chronic
}

enum InjuryLocation {
  // Front View
  head
  neck
  chest
  shoulder_l
  shoulder_r
  bicep_l
  bicep_r
  forearm_l
  forearm_r
  abdomen
  hip_l
  hip_r
  quad_l
  quad_r
  knee_l
  knee_r
  ankle_l
  ankle_r

  // Back View
  upper_back
  lower_back
  back_shoulder_l
  back_shoulder_r
  tricep_l
  tricep_r
  glute_l
  glute_r
  hamstring_l
  hamstring_r
  calf_back_l
  calf_back_r
  achilles_l
  achilles_r
}

// New enums for additional features
enum SessionStatus {
  scheduled
  completed
  cancelled
  no_show
}

enum SessionType {
  in_person
  virtual
  hybrid
}

enum SubscriptionPlan {
  monthly
  quarterly
  yearly
}

enum SubscriptionStatus {
  active
  cancelled
  expired
}

enum PaymentStatus {
  pending
  completed
  failed
  refunded
}

// Simple User model for authentication
model User {
  id                    String    @id @default(cuid())
  name                  String
  lastName              String?
  email                 String    @unique
  password              String?
  role                  UserRole?
  language              String    @default("en")
  emailVerified         Boolean   @default(false)
  emailVerificationToken String?
  resetToken            String?
  resetTokenExpiry      DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  accounts              Account[]
  sessions              Session[]
  preferences           UserPreferences?
  trainerProfile        TrainerProfile?
  clientProfile         ClientProfile?
  sentMessages          Message[]        @relation("SentMessages")
  receivedMessages      Message[]        @relation("ReceivedMessages")
  notifications         Notification[]
  subscriptions         Subscription[]
  payments              Payment[]

  @@index([email])
  @@index([role])
  @@index([emailVerificationToken])
  @@index([resetToken])
}

// NextAuth models
model Account {
  id                 String    @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id            String    @id @default(cuid())
  sessionToken  String    @unique
  userId        String
  expires       DateTime
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier    String
  token         String    @unique
  expires       DateTime

  @@unique([identifier, token])
}

model UserPreferences {
  id                  String              @id @default(cuid())
  userId              String              @unique
  hasInjury           Boolean             @default(false)
  injuryType          InjuryType?
  wantsRehabilitation RehabilitationOption? 
  environment         TrainingEnvironment
  equipment           EquipmentType
  experience          ExperienceLevel
  goal                TrainingGoal
  frequency           Int                 @db.Int
  weight              Float               // Weight in kg
  height              Float               // Height in cm
  bmi                 Float               // BMI value
  bmiCategory         String              // For quick category filtering
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  injuries            UserInjuryLocation[]

  // Indexes for all filterable fields
  @@index([environment])
  @@index([equipment])
  @@index([experience])
  @@index([goal])
  @@index([frequency])
  @@index([hasInjury])
  @@index([injuryType])
  @@index([bmi])
  @@index([bmiCategory])
  @@index([wantsRehabilitation])
  @@index([weight])
  @@index([height])
  @@index([createdAt])
  @@index([hasInjury, injuryType]) // Composite index for injury filtering
}

// Junction table for user preferences and injury locations
model UserInjuryLocation {
  id                String          @id @default(cuid())
  userPreferences   UserPreferences @relation(fields: [userPreferencesId], references: [id], onDelete: Cascade)
  userPreferencesId String
  location          InjuryLocation
  createdAt         DateTime        @default(now())

  @@unique([userPreferencesId, location])
  @@index([location])
  @@index([userPreferencesId])
  @@index([location, userPreferencesId]) // Composite index for faster filtering
}

model GoogleFitAccount {
  id                String    @id
  providerAccountId String    @unique
  access_token      String?   @db.Text
  refresh_token     String?   @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?   @db.Text
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([providerAccountId])
  @@index([createdAt])
  @@index([updatedAt])
}

// New models for trainer functionality
model TrainerProfile {
  id                  String    @id @default(cuid())
  userId              String    @unique
  bio                 String?   @db.Text
  yearsOfExperience   Int
  certifications      Json
  hourlyRate          Decimal   @db.Decimal(10, 2)
  availability        Json
  rating              Decimal?  @db.Decimal(3, 2)
  totalReviews        Int       @default(0)
  isVerified          Boolean   @default(false)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  specializations     TrainerSpecialization[]
  trainingPrograms    TrainingProgram[]
  trainingSessions    TrainingSession[]    @relation("TrainerSessions")
  workouts            Workout[]

  @@index([rating])
  @@index([isVerified])
  @@index([hourlyRate])
}

model TrainerSpecialization {
  id              String        @id @default(cuid())
  trainerId       String
  specialization  String
  createdAt       DateTime      @default(now())
  
  trainer         TrainerProfile @relation(fields: [trainerId], references: [id], onDelete: Cascade)

  @@index([trainerId])
  @@index([specialization])
}

// New models for client functionality
model ClientProfile {
  id                    String    @id @default(cuid())
  userId                String    @unique
  fitnessGoals          Json
  medicalConditions     Json
  dietaryRestrictions   Json
  emergencyContact      Json
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  progress              ClientProgress[]
  trainingSessions      TrainingSession[]  @relation("ClientSessions")

  @@index([userId])
}

model ClientProgress {
  id                  String        @id @default(cuid())
  clientId            String
  weight              Decimal?      @db.Decimal(5, 2)
  bodyFatPercentage   Decimal?      @db.Decimal(5, 2)
  measurements        Json
  progressPhotos      Json
  notes               String?       @db.Text
  recordedAt          DateTime      @default(now())
  
  client              ClientProfile @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([recordedAt])
}

// New models for training programs and sessions
model TrainingProgram {
  id                    String    @id @default(cuid())
  trainerId             String
  title                 String
  description           String?   @db.Text
  durationWeeks         Int
  price                 Decimal   @db.Decimal(10, 2)
  maxParticipants       Int
  currentParticipants   Int       @default(0)
  isActive              Boolean   @default(true)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  trainer               TrainerProfile @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  sessions              TrainingSession[]

  @@index([trainerId])
  @@index([isActive])
  @@index([price])
}

model TrainingSession {
  id              String        @id @default(cuid())
  trainerId       String
  clientId        String
  programId       String?
  sessionDate     DateTime
  startTime       DateTime
  endTime         DateTime
  status          SessionStatus @default(scheduled)
  sessionType     SessionType
  location        Json?
  meetingLink     String?
  notes           String?       @db.Text
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  trainer         TrainerProfile @relation("TrainerSessions", fields: [trainerId], references: [id], onDelete: Cascade)
  client          ClientProfile  @relation("ClientSessions", fields: [clientId], references: [id], onDelete: Cascade)
  program         TrainingProgram? @relation(fields: [programId], references: [id], onDelete: SetNull)
  feedback        SessionFeedback?

  @@index([trainerId])
  @@index([clientId])
  @@index([programId])
  @@index([sessionDate])
  @@index([status])
}

model SessionFeedback {
  id          String    @id @default(cuid())
  sessionId   String    @unique
  rating      Int
  feedback    String?   @db.Text
  createdAt   DateTime  @default(now())
  
  session     TrainingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([rating])
}

// New models for workouts and exercises
model Workout {
  id                String    @id @default(cuid())
  trainerId         String
  title             String
  description       String?   @db.Text
  difficultyLevel   ExperienceLevel
  durationMinutes   Int
  equipmentNeeded   Json
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  trainer           TrainerProfile @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  exercises         WorkoutExercise[]

  @@index([trainerId])
  @@index([difficultyLevel])
}

model Exercise {
  id                String    @id @default(cuid())
  name              String
  description       String?   @db.Text
  muscleGroups      Json
  equipmentNeeded   Json
  difficultyLevel   ExperienceLevel
  videoUrl          String?
  createdAt         DateTime  @default(now())
  
  workouts          WorkoutExercise[]

  @@index([difficultyLevel])
}

model WorkoutExercise {
  id              String    @id @default(cuid())
  workoutId       String
  exerciseId      String
  sets            Int
  reps            Int
  durationSeconds Int?
  restSeconds     Int?
  orderIndex      Int
  notes           String?   @db.Text
  
  workout         Workout   @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exercise        Exercise  @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@index([workoutId])
  @@index([exerciseId])
  @@index([orderIndex])
}

// New models for payments and subscriptions
model Subscription {
  id          String            @id @default(cuid())
  userId      String
  planType    SubscriptionPlan
  status      SubscriptionStatus @default(active)
  startDate   DateTime
  endDate     DateTime
  price       Decimal           @db.Decimal(10, 2)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([planType])
}

model Payment {
  id              String        @id @default(cuid())
  userId          String
  amount          Decimal       @db.Decimal(10, 2)
  currency        String        @default("USD")
  paymentMethod   String
  status          PaymentStatus @default(pending)
  paymentDate     DateTime      @default(now())
  
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([paymentDate])
}

// New models for communication
model Message {
  id          String    @id @default(cuid())
  senderId    String
  receiverId  String
  content     String    @db.Text
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  
  sender      User      @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User      @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([receiverId])
  @@index([isRead])
  @@index([createdAt])
}

model Notification {
  id          String    @id @default(cuid())
  userId      String
  type        String
  content     String    @db.Text
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
} 