// This is your Prisma schema file
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  trainer
  client
  user
  admin
}

enum CertificationStatus {
  pending
  accepted
  rejected
  expired
  
}

// Simple User model for authentication
model User {
  id                    String    @id @default(cuid())
  // firstName             String
  // lastName              String?
  email                 String?   @unique
  phone                 String?   @unique
  password              String?
  role                  UserRole?
  language              String    @default("en")
  emailVerified         Boolean   @default(false)
  phoneVerified         Boolean   @default(false)
  resetToken            String?
  resetTokenExpiry      DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  accounts              Account[]
  sessions              Session[]
  trainerProfile        TrainerProfile?
  clientProfile         ClientProfile?
  emailVerifications    EmailVerification[]
  phoneVerifications    PhoneVerification[]

  @@index([email])
  @@index([phone])
  @@index([role])
  @@index([resetToken])
}

// NextAuth models
model Account {
  id                 String    @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id            String    @id @default(cuid())
  sessionToken  String    @unique
  userId        String
  expires       DateTime
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model EmailVerification {
  id        String   @id @default(cuid())
  email     String
  code      String
  used      Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  userId    String?
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([code])
  @@index([userId])
}

model PhoneVerification {
  id        String   @id @default(cuid())
  phone     String
  code      String
  used      Boolean  @default(false)
  expires   DateTime
  createdAt DateTime @default(now())
  userId    String?
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([phone])
  @@index([code])
  @@index([userId])
}

model Location {
  id      String   @id @default(cuid())
  city    String
  state   String
  country String
  lat     Float?
  lon     Float?
  trainers TrainerProfile[]
  clients  ClientProfile[]
  gyms     Gym[]
}

model Gym {
  id        String   @id @default(cuid())
  name      String
  address   String?
  lat       Float
  lon       Float
  placeId   String?  // Google place_id
  locationId String?
  location   Location? @relation(fields: [locationId], references: [id])
  trainers   TrainerGym[]
}

model TrainerProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  firstName         String
  lastName          String?
  dateOfBirth       DateTime?
  gender            String?
  trainingSince     Int?     
  profileImage      String?  
  professionalBio   String?  @db.Text 
  specialties       TrainerSpecialty[]
  languages         TrainerLanguage[]
  trainingEnvironments TrainerEnvironment[]
  trainingTypes     TrainerType[]
  certifications    Certification[]
  locationId        String?
  location          Location? @relation(fields: [locationId], references: [id])
  pricingType       String?
  pricePerSession   Int?
  currency          String?
  contactEmail      String?
  contactPhone      String?
  availability      Json?    // NOVO
  education         Json?    // NOVO
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  trainerInfo       TrainerInfo?
  trainerGyms       TrainerGym[]
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TrainerSpecialty {
  id                String   @id @default(cuid())
  trainerProfileId     String
  name              String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  trainerProfile       TrainerProfile @relation(fields: [trainerProfileId], references: [id], onDelete: Cascade)
}

model TrainerLanguage {
  id                String   @id @default(cuid())
  trainerProfileId     String
  name              String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  trainerProfile       TrainerProfile @relation(fields: [trainerProfileId], references: [id], onDelete: Cascade)
}

model TrainerEnvironment {
  id                String   @id @default(cuid())
  trainerProfileId     String
  name              String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  trainerProfile       TrainerProfile @relation(fields: [trainerProfileId], references: [id], onDelete: Cascade)
}

model TrainerType {
  id                String   @id @default(cuid())
  trainerProfileId     String
  name              String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  trainerProfile       TrainerProfile @relation(fields: [trainerProfileId], references: [id], onDelete: Cascade)
}

model Certification {
  id            String   @id @default(cuid())
  trainerProfileId String
  name          String
  issuer        String?
  expiryDate    DateTime?
  status        CertificationStatus @default(pending)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  hidden        Boolean  @default(false)

  trainerProfile   TrainerProfile @relation(fields: [trainerProfileId], references: [id], onDelete: Cascade)
  documents     CertificationDocument[]
}

model CertificationDocument {
  id              String   @id @default(cuid())
  certificationId String
  url             String
  originalName    String?
  mimetype        String?
  createdAt       DateTime @default(now())

  certification   Certification @relation(fields: [certificationId], references: [id], onDelete: Cascade)
}

model ClientProfile {
  id                   String   @id @default(cuid())
  userId               String   @unique
  firstName            String
  lastName             String
  dateOfBirth          DateTime
  gender               String
  height               Int      // in cm
  weight               Int      // in kg
  experienceLevel      String
  previousActivities   String?  @db.Text
  primaryGoal          String
  secondaryGoal        String?
  goalDescription      String?  @db.Text
  email                String?
  phone                String?
  locationId           String?
  location             Location? @relation(fields: [locationId], references: [id])
  profileImage         String?
  bio                  String?  @db.Text
  medicalConditions    String?  @db.Text
  allergies            String?  @db.Text
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  languages            ClientLanguage[]
  preferredActivities  ClientActivity[]
}

model ClientLanguage {
  id              String   @id @default(cuid())
  clientProfileId String
  name            String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  clientProfile   ClientProfile @relation(fields: [clientProfileId], references: [id], onDelete: Cascade)
}

model ClientActivity {
  id              String   @id @default(cuid())
  clientProfileId String
  name            String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  clientProfile   ClientProfile @relation(fields: [clientProfileId], references: [id], onDelete: Cascade)
}

model TrainerInfo {
  id                String   @id @default(cuid())
  trainerProfileId  String   @unique
  rating            Float?
  totalSessions     Int?
  totalEarnings     Int?
  upcomingSessions  Int?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  trainerProfile    TrainerProfile @relation(fields: [trainerProfileId], references: [id], onDelete: Cascade)
}

model TrainerGym {
  id              String   @id @default(cuid())
  trainerId       String
  gymId           String
  trainer         TrainerProfile @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  gym             Gym            @relation(fields: [gymId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([trainerId, gymId])
}